CompilerIf #PB_Compiler_OS = #PB_OS_MacOS 
  IncludePath "/Users/as/Documents/GitHub/Widget/"
CompilerElseIf #PB_Compiler_OS = #PB_OS_Windows
  ;  IncludePath "/Users/as/Documents/GitHub/Widget/"
CompilerElseIf #PB_Compiler_OS = #PB_OS_Linux
  ;  IncludePath "/Users/a/Documents/GitHub/Widget/"
CompilerEndIf

XIncludeFile "module_macros.pbi"
XIncludeFile "module_constants.pbi"
XIncludeFile "module_structures.pbi"
XIncludeFile "module_scroll.pbi"
XIncludeFile "module_text.pbi"
XIncludeFile "module_button.pbi"
XIncludeFile "module_string.pbi"
XIncludeFile "module_editor.pbi"
XIncludeFile "module_tree.pbi"
XIncludeFile "module_listicon.pbi"

;
; This code is automatically generated by the FormDesigner.
; Manual modification is possible to adjust existing commands, but anything else will be dropped when the code is compiled.
; Event procedures needs to be put in another source file.
;

Global Window_0, Canvas_0, winBackColor = $F0F0F0

Global Editor_0, Tree_0, Tree_1

Global *Editor_0.Widget_S, *Tree_0.Widget_S, *Tree_1.Widget_S

Procedure _CallBacks()
;     Protected Repaint, *This.Widget_S
;     Protected Canvas = EventGadget()
;     Protected Width = GadgetWidth(Canvas)
;     Protected Height = GadgetHeight(Canvas)
;     Protected MouseX = GetGadgetAttribute(Canvas, #PB_Canvas_MouseX)
;     Protected MouseY = GetGadgetAttribute(Canvas, #PB_Canvas_MouseY)
;     Protected WheelDelta = GetGadgetAttribute(EventGadget(), #PB_Canvas_WheelDelta)
;     
;     Select EventType()
;       Case #PB_EventType_Repaint : Repaint = EventData()
;       Case #PB_EventType_Resize : Repaint = EventData()
;       Default
;         
;         If EventType() = #PB_EventType_LeftButtonDown
;           SetActiveGadget(EventGadget())
;         EndIf
;         
;         If Editor::CallBack(*Editor_0, EventType())
;           Editor::ReDraw(*Editor_0)
;         EndIf
;         If Tree::CallBack(*Tree_0, EventType())
;           Tree::ReDraw(*Tree_0)
;         EndIf
;         If Tree::CallBack(*Tree_1, EventType())
;           Tree::ReDraw(*Tree_1)
;         EndIf
;         
;     EndSelect
;     
;     If Repaint 
;       Text::ReDraw(0, Canvas, winBackColor)
;     EndIf
;     
  EndProcedure
  
Procedure CallBacks()
    Protected Repaint, *This.Widget_S
    Protected Canvas = EventGadget()
    Protected Width = GadgetWidth(Canvas)
    Protected Height = GadgetHeight(Canvas)
    Protected MouseX = GetGadgetAttribute(Canvas, #PB_Canvas_MouseX)
    Protected MouseY = GetGadgetAttribute(Canvas, #PB_Canvas_MouseY)
    Protected WheelDelta = GetGadgetAttribute(EventGadget(), #PB_Canvas_WheelDelta)
    
    Select EventType()
      Case #PB_EventType_Repaint : Repaint = EventData()
      Case #PB_EventType_Resize : Repaint = EventData()
      Default
        
        If EventType() = #PB_EventType_LeftButtonDown
          SetActiveGadget(EventGadget())
        EndIf
        
        With List()\Widget
          ForEach List()
            If Canvas = \Canvas\Gadget
              Select \Type
                Case #PB_GadgetType_Tree : Repaint | Tree::CallBack(List()\Widget, EventType())
                Case #PB_GadgetType_Editor : Repaint | Editor::CallBack(List()\Widget, EventType())
                Case #PB_GadgetType_Button : Repaint | Button::CallBack(List()\Widget, EventType())
                Case #PB_GadgetType_String : Repaint | String::CallBack(List()\Widget, EventType()) 
                  ;  Case #PB_GadgetType_ScrollBar : Repaint | Scroll::CallBack(\Scroll\v, EventType(), \Canvas\Mouse\X, \Canvas\Mouse\Y)
              EndSelect
              
            EndIf
          Next
        EndWith
    EndSelect
    
    If Repaint 
      If IsGadget(Canvas) And StartDrawing(CanvasOutput(Canvas))
        DrawingMode(#PB_2DDrawing_Default)
        Box(0,0,OutputWidth(),OutputHeight(), winBackColor)
        
        With List()\Widget
          ForEach List()
            If Canvas = \Canvas\Gadget
              Select \Type
                Case #PB_GadgetType_Tree : Repaint | Editor::Draw(List()\Widget)
                Case #PB_GadgetType_Editor : Repaint | Editor::Draw(List()\Widget)
              EndSelect
            EndIf
          Next
        EndWith
        
        StopDrawing()
      EndIf
    EndIf
    
  EndProcedure
  
Procedure OpenWindow_0(x = 0, y = 0, width = 800, height = 600)
  Window_0 = OpenWindow(#PB_Any, x, y, width, height, "", #PB_Window_SystemMenu)
  
  ; Demo draw widgets on the canvas
  Canvas_0 = CanvasGadget(#PB_Any,  10, 40, 780, 550, #PB_Canvas_Keyboard)
  ; SetGadgetAttribute(Canvas_0, #PB_Canvas_Cursor, #PB_Cursor_Cross)
  ; SetGadgetColor(Canvas_0, #PB_Gadget_BackColor, $6D6DD9)
  BindGadgetEvent(Canvas_0, @CallBacks())
  
  *Editor_0 = Editor::Create(Canvas_0, #PB_Any, 1, 1, 548, 548, "", #PB_Flag_Numeric) 
  *Tree_0 = Tree::Create(Canvas_0, #PB_Any, 558, 1, 220, 180, "", #PB_Flag_FullSelection)
  *Tree_1 = Tree::Create(Canvas_0, #PB_Any, 558, 191, 220, 358, "", #PB_Flag_FullSelection)
  
  ;Editor::SetText(*Editor_0, "")
  Tree::AddItem(*Tree_0, -1, "Window_0")
  
  Tree::AddItem(*Tree_1, -1, "Button")
  Tree::AddItem(*Tree_1, -1, "String")
  Tree::AddItem(*Tree_1, -1, "Text")
     
EndProcedure

Procedure Window_0_Events(event)
  Select event
    Case #PB_Event_CloseWindow
      ProcedureReturn #False

    Case #PB_Event_Menu
      Select EventMenu()
      EndSelect

    Case #PB_Event_Gadget
      Select EventGadget()
      EndSelect
  EndSelect
  
  ProcedureReturn #True
EndProcedure

OpenWindow_0()

Repeat
  Select WaitWindowEvent()
    Case #PB_Event_CloseWindow
      Break
    Case #PB_Event_Gadget
      
  EndSelect
ForEver
; IDE Options = PureBasic 5.62 (MacOS X - x64)
; Folding = 0-+
; EnableXP