;
; This code is automatically generated by the FormDesigner.
; Manual modification is possible to adjust existing commands, but anything else will be dropped when the code is compiled.
; Event procedures needs to be put in another source file.
;

IncludePath "../../"
XIncludeFile "module_bar.pbi"

;-
;- EXAMPLE
;-
CompilerIf #PB_Compiler_IsMainFile
  UseModule Bar
  
  
  Global g_container, g_min, g_max, g_page_pos, g_area_pos, g_len, g_value, g_is_vertical, g_set, g_page_len, g_area_len, g_Canvas
  
  Global x=101,y=101, Width=790, Height=600 
  Global v,h, v_page_len, h_page_len, v_max, h_max, scroll_width, scroll_height, v_height=Height-y*2, h_width=Width-x*2-200, h_height=16, v_width=16, v_hide, h_hide
  Global v_X=x+h_width, h_Y = y+v_height, v_Y=y, h_X = x
  
  v_page_len = v_height
  h_page_len = h_width
  
  If LoadImage(0, #PB_Compiler_Home + "examples/sources/Data/Background.bmp")
    ResizeImage(0,ImageWidth(0)*2,ImageHeight(0)*2)
    
    ; draw frame on the image
    If StartDrawing(ImageOutput(0))
      DrawingMode(#PB_2DDrawing_Outlined)
      Box(0,0,OutputWidth(),OutputWidth(), $FF0000)
      h_max = OutputWidth()
      v_max = OutputHeight()
      StopDrawing()
    EndIf
  EndIf
  
  Procedure.i gResizes(X.i,Y.i,Width.i,Height.i)
    
;     If Width=#PB_Ignore : Width = v_X : Else : Width+x-v_Width : EndIf
;       If Height=#PB_Ignore : Height = h_Y : Else : Height+y-h_Height : EndIf
;       
;       SetAttribute(v, #PB_ScrollBar_PageLength, (h_Y+Bool(h_Hide) * h_Height)-v_y)
;       SetAttribute(h, #PB_ScrollBar_PageLength, (v_X+Bool(v_Hide) * v_width)-h_x)
;       
;       v_Hide = Resize(v, Width, Y, #PB_Ignore, Bool(h_hide) * ((h_Y+h_Height)-v_Y)) 
;       h_Hide = Resize(h, X, Height, Bool(v_hide) * ((v_X+v_Width)-h_X), #PB_Ignore) 
;       
;       SetAttribute(v, #PB_ScrollBar_PageLength, (h_Y+Bool(h_Hide) * h_Height)-v_y)
;       SetAttribute(h, #PB_ScrollBar_PageLength, (v_X+Bool(v_Hide) * v_width)-h_x)
;       
;       ; 
;       v_Hide = Resize(v, #PB_Ignore, #PB_Ignore, #PB_Ignore, Bool(h_hide) * ((h_Y+h_Height)-v_Y))
;       h_Hide = Resize(h, #PB_Ignore, #PB_Ignore, Bool(v_hide) * ((v_X+v_Width)-h_X), #PB_Ignore)
;       
;       If Not v_Hide 
;         Resize(h, #PB_Ignore, #PB_Ignore, (v_x-h_x)+Bool(v_Radius)*4, #PB_Ignore)
;       EndIf
;       If Not h_Hide 
;         Resize(v, #PB_Ignore, #PB_Ignore, #PB_Ignore, (h_y-v_y)+Bool(h_Radius)*4)
;       EndIf
;       
;      Debug ""+Width +" "+ h_Page_len
;     ProcedureReturn 1
      
      If y=#PB_Ignore : y = v_Y : EndIf
      If x=#PB_Ignore : x = h_X : EndIf
      If Width=#PB_Ignore : Width = v_X-h_X+v_width : EndIf
      If Height=#PB_Ignore : Height = h_Y-v_Y+h_height : EndIf
      
;       If h_Max < width ; Width-Bool(Not v_Hide) * v_width
;         h_Max = width ; Width-Bool(Not v_Hide) * v_width
;       EndIf
;       If v_Max < Height-Bool(Not h_Hide) * h_height
;         v_Max = Height-Bool(Not h_Hide) * h_height
;       EndIf
      
;       ; Debug ""+Width +" "+ Str(v_X-h_X+v_width)
;       
;       SetAttribute(v, #PB_ScrollBar_PageLength, Height - Bool(Not h_hide) * h_height) 
;       SetAttribute(h, #PB_ScrollBar_PageLength, Width - Bool(Not v_hide) * v_width)  
;       
;       v_Hide = Resize(v, x+h_Page_Len, y, #PB_Ignore, v_Page_len)
;       h_Hide = Resize(h, x, y+v_Page_len, h_Page_len, #PB_Ignore)
;       
;       SetAttribute(v, #PB_ScrollBar_PageLength, Height - Bool(Not h_hide) * h_height)
;       SetAttribute(h, #PB_ScrollBar_PageLength, Width - Bool(Not v_hide) * v_width)
;       
;       v_Hide = Resize(v, x+h_Page_len, #PB_Ignore, #PB_Ignore, v_Page_len + Bool(v_Radius And Not h_Hide)*4)
;       h_Hide = Resize(h, #PB_Ignore, y+v_Page_len, h_Page_len + Bool(h_Radius And Not v_Hide)*4, #PB_Ignore)
;       
;       ProcedureReturn 1
      
      ;       If Width=#PB_Ignore 
      ;         Width = v_X+v_Width
      ;       EndIf
      ;       If Height=#PB_Ignore 
      ;         Height = h_Y+h_Height
      ;       EndIf
      
      SetGadgetAttribute(v, #PB_ScrollBar_PageLength, Height-Bool(Not h_Hide) * h_height)
      SetGadgetAttribute(h, #PB_ScrollBar_PageLength, Width-Bool(Not v_Hide) * v_width)
      
      ;       v_Hide = Resize(v, x+h_Page_Len, y, #PB_Ignore, v_Page_len)
      ;      h_Hide = Resize(h, x, y+v_Page_len, h_Page_len, #PB_Ignore)
      ;       v_Hide = Resize(v, x+h_Page_Len, y, #PB_Ignore, (h_Y+Bool(h_Hide) * h_Height) - v_Y)
      ;       h_Hide = Resize(h, x, y+v_Page_len, (v_X+Bool(v_Hide) * v_width) - h_X, #PB_Ignore)
      
      v_Hide = ResizeGadget(v, Width+x-v_Width, Y, #PB_Ignore, v_Page_len)
      h_Hide = ResizeGadget(h, X, Height+y-h_Height, h_Page_len, #PB_Ignore)
      
      ;       v_Hide = Resize(v, Width+x-v_Width, Y, #PB_Ignore, (h_Y+Bool(h_Hide) * h_Height) - v_Y)
      ;       h_Hide = Resize(h, X, Height+y-h_Height, (v_X+Bool(v_Hide) * v_width) - h_X, #PB_Ignore)
      
      SetGadgetAttribute(v, #PB_ScrollBar_PageLength, Height-Bool(Not h_Hide) * h_height)
      SetGadgetAttribute(h, #PB_ScrollBar_PageLength, Width-Bool(Not v_Hide) * v_width)
      
;        v_Hide = Resize(v, #PB_Ignore, #PB_Ignore, #PB_Ignore, ((h_Y+Bool(h_Hide) * h_Height) - v_Y) + Bool(v_Radius And Not h_Hide)*4)
;       h_Hide = Resize(h, #PB_Ignore, #PB_Ignore, ((v_X+Bool(v_Hide) * v_width) - h_X) + Bool(h_Radius And Not v_Hide)*4, #PB_Ignore)
;      v_Hide = Resize(v, #PB_Ignore, #PB_Ignore, #PB_Ignore, ((h_Y+Bool(h_Hide) * h_Height) - v_Y))
;       h_Hide = Resize(h, #PB_Ignore, #PB_Ignore, ((v_X+Bool(v_Hide) * v_width) - h_X), #PB_Ignore)
      
      v_Hide = ResizeGadget(v, #PB_Ignore, #PB_Ignore, #PB_Ignore, v_Page_len)
      h_Hide = ResizeGadget(h, #PB_Ignore, #PB_Ignore, h_Page_len, #PB_Ignore)
      
      v_page_len = GetGadgetAttribute(v, #PB_ScrollBar_PageLength)
      h_page_len = GetGadgetAttribute(h, #PB_ScrollBar_PageLength)
      v_height = GadgetHeight(v)
      h_width = GadgetWidth(h)
      
;       v_Hide = Resize(v, #PB_Ignore, #PB_Ignore, #PB_Ignore, Bool(h_hide) * ((h_Y+h_Height)-v_Y))
;       h_Hide = Resize(h, #PB_Ignore, #PB_Ignore, Bool(v_hide) * ((v_X+v_Width)-h_X), #PB_Ignore)
      
; ;       If v_Hide 
; ;        ; Debug v_Page_Pos
; ;         
; ;       ;  Y = 0
; ;        ; v_Page_Pos = 0
; ;       Else
; ;         ResizeGadget(h, #PB_Ignore, #PB_Ignore, (v_x-h_x)+Bool(v_Radius)*4, #PB_Ignore)
; ;       EndIf
; ;       If h_Hide 
; ;        ; X = 0
; ;        ; h_Page_Pos = 0
; ;       Else
; ;         ResizeGadget(v, #PB_Ignore, #PB_Ignore, #PB_Ignore, (h_y-v_y)+Bool(h_Radius)*4)
; ;       EndIf
; ;       
; ; ;       SetAttribute(v, #PB_ScrollBar_PageLength, ((h_Y+Bool(h_Hide) * h_Height) - v_Y))
; ; ;       SetAttribute(h, #PB_ScrollBar_PageLength, ((v_X+Bool(v_Hide) * v_width) - h_X))
      
      ProcedureReturn 1
    EndProcedure
    
    Procedure ReDraw(Canvas)
    With *Scroll
      If StartDrawing(CanvasOutput(Canvas))
        ; back ground
        DrawingMode(#PB_2DDrawing_Default)
        Box(0,0,Width,Height, $FFFFFF)
        
        ClipOutput(x, y, h_page_len, v_page_len)
        DrawImage(ImageID(0), x-GetGadgetState(h), y-GetGadgetState(v))
        UnclipOutput()
                
;         ; frame 
         DrawingMode(#PB_2DDrawing_Outlined)
;         Box(x-1,y-1,
;             2 + Bool(v_hide) * h_page_len + Bool(Not v_hide) * ((v_X+v_width)-x),
;             2 + Bool(h_hide) * v_page_len + Bool(Not h_hide) * ((h_Y+h_height)-y), $0000FF)
        ;       ; 
        ;       Box(x, y, Width-x*2, Height-y*2, $0000FF)
        
        ; Scroll area coordinate ; (v_x-x)
        ;Box(x-h_Page_Pos, y-v_Page_Pos, h_max, v_max, $FF0000)
        ;Debug Str(((h_max-h_page_len)-h_Page_Pos))
        
        Box(x-GetGadgetState(h), y-GetGadgetState(v), h_max, v_max, $FF0000)
        
        ; page coordinate
        Box(x, y, h_page_len, v_page_len, $00FF00)
        
        ; area coordinate
        ;Box(x, y, h_Area_Len, v_Area_Len, $00FFFF)
        
        ; scroll coordinate
        Box(x, y, h_width, v_height, $FF00FF)
        
        ; frame coordinate
        Box(x, y, 
            h_page_len + (Bool(Not v_hide) * v_width),
            v_page_len + (Bool(Not h_hide) * h_height), $FFFF00)
        
        StopDrawing()
      EndIf
    EndWith
  EndProcedure
  
  Procedure Canvas_Events(Canvas.i, EventType.i)
    Protected Repaint, iWidth, iHeight
    Width = GadgetWidth(Canvas)
    Height = GadgetHeight(Canvas)
    Protected mouseX = GetGadgetAttribute(Canvas, #PB_Canvas_MouseX)
    Protected mouseY = GetGadgetAttribute(Canvas, #PB_Canvas_MouseY)
    
    
    Select EventType
      Case #PB_EventType_Resize : ResizeGadget(Canvas, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore) ; Bug (562)
          gResizes(x, y, Width-x*2, Height-y*2)                                        ;, h)
                                                                                                       ;  Resize(v, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore, h)
        Repaint = 1
    EndSelect
    
;     Repaint | CallBack(v, EventType, mouseX,mouseY)
;     Repaint | CallBack(h, EventType, mouseX,mouseY)
    
;     If Not (v_at Or h_at)
;       Select EventType
;         Case #PB_EventType_LeftButtonDown
;           Debug "#PB_EventType_LeftButtonDown "
;           SetAttribute(h, #PB_ScrollBar_Inverted, h_Inverted!1)
;           
;           Repaint = 1
;       EndSelect
;     EndIf
    
    If Repaint
      ReDraw(g_Canvas)
    EndIf
  EndProcedure
  
  Procedure Canvas_CallBack()
    ; Canvas events bug fix
    Protected Result.b
    Static MouseLeave.b
    Protected EventGadget.i = EventGadget()
    Protected EventType.i = EventType()
    Protected Width = GadgetWidth(EventGadget)
    Protected Height = GadgetHeight(EventGadget)
    Protected MouseX = GetGadgetAttribute(EventGadget, #PB_Canvas_MouseX)
    Protected MouseY = GetGadgetAttribute(EventGadget, #PB_Canvas_MouseY)
    
    ; Это из за ошибки в мак ос и линукс
    CompilerIf #PB_Compiler_OS = #PB_OS_MacOS Or #PB_Compiler_OS = #PB_OS_Linux
      Select EventType 
        Case #PB_EventType_MouseEnter 
          If GetGadgetAttribute(EventGadget, #PB_Canvas_Buttons) Or MouseLeave =- 1
            EventType = #PB_EventType_MouseMove
            MouseLeave = 0
          EndIf
          
        Case #PB_EventType_MouseLeave 
          If GetGadgetAttribute(EventGadget, #PB_Canvas_Buttons)
            EventType = #PB_EventType_MouseMove
            MouseLeave = 1
          EndIf
          
        Case #PB_EventType_LeftButtonDown
          If GetActiveGadget()<>EventGadget
            SetActiveGadget(EventGadget)
          EndIf
          
        Case #PB_EventType_LeftButtonUp
          If MouseLeave = 1 And Not Bool((MouseX>=0 And MouseX<Width) And (MouseY>=0 And MouseY<Height))
            MouseLeave = 0
            CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
              Result | Canvas_Events(EventGadget, #PB_EventType_LeftButtonUp)
              EventType = #PB_EventType_MouseLeave
            CompilerEndIf
          Else
            MouseLeave =- 1
            Result | Canvas_Events(EventGadget, #PB_EventType_LeftButtonUp)
            EventType = #PB_EventType_LeftClick
          EndIf
          
        Case #PB_EventType_LeftClick : ProcedureReturn 0
      EndSelect
    CompilerEndIf
    
    Result | Canvas_Events(EventGadget, EventType)
    
    ProcedureReturn Result
  EndProcedure
  
  Procedure Widget_Events()
    Select EventType()
      Case #PB_EventType_ScrollChange
        Debug EventData()
    EndSelect
  EndProcedure
  
  Procedure gadgetscroll()
    ReDraw(g_Canvas)
  EndProcedure
  
  Procedure ResizeCallBack()
    ResizeGadget(g_Canvas, #PB_Ignore, #PB_Ignore, WindowWidth(EventWindow(), #PB_Window_InnerCoordinate)-210, WindowHeight(EventWindow(), #PB_Window_InnerCoordinate)-20)
  EndProcedure
  
  If OpenWindow(0, 0, 0, Width+20, Height+20, "Scroll on the canvas", #PB_Window_SystemMenu | #PB_Window_SizeGadget | #PB_Window_ScreenCentered)
    g_container = ContainerGadget(#PB_Any, 10, 10, 180, 220, #PB_Container_Flat)
    
    g_is_vertical = CheckBoxGadget(#PB_Any, 10, 10, 160, 20, "Vertical") : SetGadgetState(g_is_vertical, 1)
    g_value = StringGadget(#PB_Any, 10, 40, 120, 20, "100", #PB_String_Numeric)
    g_set = ButtonGadget(#PB_Any, 140, 40, 30, 20, "set")
    
    g_min = OptionGadget(#PB_Any, 10, 70, 160, 20, "Min")
    g_max = OptionGadget(#PB_Any, 10, 90, 160, 20, "Max") : SetGadgetState(g_max, 1)
    g_len = OptionGadget(#PB_Any, 10, 110, 160, 20, "len")
    g_page_len = OptionGadget(#PB_Any, 10, 130, 160, 20, "Page len")
    g_area_len = OptionGadget(#PB_Any, 10, 150, 160, 20, "Area len")
    g_page_pos = OptionGadget(#PB_Any, 10, 170, 160, 20, "Page pos")
    g_area_pos = OptionGadget(#PB_Any, 10, 190, 160, 20, "Area pos")
    
    CloseGadgetList()
    
    ;Canvas = CanvasGadget(#PB_Any, 200, 10, 380, 380, #PB_Canvas_Keyboard)
    g_Canvas = CanvasGadget(#PB_Any, 200,10, 600, Height, #PB_Canvas_Keyboard|#PB_Canvas_Container)
    SetGadgetAttribute(g_Canvas, #PB_Canvas_Cursor, #PB_Cursor_Hand)
    
    ; Create both scroll bars
    v = ScrollBarGadget(-1, v_x, v_y, 16, v_height, 0,0,v_height, #PB_ScrollBar_Vertical)
    h = ScrollBarGadget(-1, h_x, h_y, h_width, 16, 0,0,h_width, 0)
    
    BindEvent(#PB_Event_Gadget, @gadgetscroll(), 0, v)
    BindEvent(#PB_Event_Gadget, @gadgetscroll(), 0, h)
    CloseGadgetList()
    
    ; Bars(*Scroll, 16, 7, 1)
    SetGadgetAttribute(v, #PB_ScrollBar_Maximum, v_max)
    SetGadgetAttribute(h, #PB_ScrollBar_Maximum, h_max)
    
    ; Set scroll page position
    SetGadgetState(v, 70)
    SetGadgetState(h, 55)
    
    ReDraw(g_Canvas)
    PostEvent(#PB_Event_Gadget, 0,g_Canvas,#PB_EventType_Resize)
    BindGadgetEvent(g_Canvas, @Canvas_CallBack())
    
    BindEvent(#PB_Event_SizeWindow, @ResizeCallBack())
    
    Define Event, value
    Repeat 
      Event = WaitWindowEvent()
      Select Event
        Case #PB_Event_Gadget
          
          Select EventGadget()
            Case g_set
              value = Val(GetGadgetText(g_value))
              
              Select 1
                Case GetGadgetState(g_min) 
                  Select GetGadgetState(g_is_vertical)
                    Case 1
                      SetGadgetAttribute(v, #PB_ScrollBar_Minimum, value)
                    Case 0
                      SetGadgetAttribute(h, #PB_ScrollBar_Minimum, value)
                  EndSelect
                  
                Case GetGadgetState(g_max) 
                  Select GetGadgetState(g_is_vertical)
                    Case 1
                      SetGadgetAttribute(v, #PB_ScrollBar_Maximum, value)
                    Case 0
                      SetGadgetAttribute(h, #PB_ScrollBar_Maximum, value)
                  EndSelect
                  
                Case GetGadgetState(g_len) 
                  Select GetGadgetState(g_is_vertical)
                    Case 1
                      ResizeGadget(v, #PB_Ignore, #PB_Ignore, #PB_Ignore, value)
                    Case 0
                      ResizeGadget(h, #PB_Ignore, #PB_Ignore, value, #PB_Ignore)
                  EndSelect
                  
                Case GetGadgetState(g_page_len) 
                  Select GetGadgetState(g_is_vertical)
                    Case 1
                      SetGadgetAttribute(v, #PB_ScrollBar_PageLength, value)
                    Case 0
                      SetGadgetAttribute(h, #PB_ScrollBar_PageLength, value)
                  EndSelect
                  
;                 Case GetGadgetState(g_area_len) 
;                   Select GetGadgetState(g_is_vertical)
;                     Case 1
;                       v_Area_len = value
;                     Case 0
;                       h_Area_len = value
;                   EndSelect
                  
                
              EndSelect
              
              v_max = GetGadgetAttribute(v, #PB_ScrollBar_Maximum)
              h_max = GetGadgetAttribute(h, #PB_ScrollBar_Maximum)
              v_page_len = GetGadgetAttribute(v, #PB_ScrollBar_PageLength)
              h_page_len = GetGadgetAttribute(h, #PB_ScrollBar_PageLength)
              v_height = GadgetHeight(v)
              h_width = GadgetWidth(h)
              
              
              Debug "vmi "+ GetGadgetAttribute(v, #PB_ScrollBar_Minimum) +" vma "+ v_max +" vpl "+ v_page_len
              ReDraw(g_Canvas)
          EndSelect
          
      EndSelect
    Until Event = #PB_Event_CloseWindow
  EndIf
CompilerEndIf

; IDE Options = PureBasic 5.62 (Windows - x64)
; CursorPosition = 405
; FirstLine = 325
; Folding = --0---
; EnableXP