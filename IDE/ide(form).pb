XIncludeFile "../widgets.pbi"
;  XIncludeFile "../examples/empty.pb"
;
; This code is automatically generated by the FormDesigner.
; Manual modification is possible to adjust existing commands, but anything else will be dropped when the code is compiled.
; Event procedures needs to be put in another source file.
;

;- EXAMPLE
EnableExplicit
Uselib(widget)

;- GLOBALs
Global window_ide, canvas_ide

Global Splitter_ide, Splitter_design, splitter_debug, Splitter_inspector, splitter_help
Global toolbar_design, listview_debug, id_help_text
Global id_design_panel, id_design_form, id_design_code, id_events_tree,
       id_elements, id_properties_tree, id_inspector_tree, id_inspector_panel

;- ENUMs
Enumeration 
  #_pi_group_0 
  #_pi_id
  #_pi_class
  #_pi_text
  
  #_pi_group_1 
  #_pi_x
  #_pi_y
  #_pi_width
  #_pi_height
  
  #_pi_group_2 
  #_pi_disable
  #_pi_hide
EndEnumeration

Enumeration 
  #_ei_leftclick
  #_ei_change
  #_ei_enter
  #_ei_leave
EndEnumeration





Procedure.i GetClassType(Class.s)
  Protected Result.i
  
  Select Trim(Class.s)
    Case "Button"         : Result = #PB_GadgetType_Button
    Case "ButtonImage"    : Result = #PB_GadgetType_ButtonImage
    Case "Calendar"       : Result = #PB_GadgetType_Calendar
    Case "Canvas"         : Result = #PB_GadgetType_Canvas
    Case "CheckBox"       : Result = #PB_GadgetType_CheckBox
    Case "ComboBox"       : Result = #PB_GadgetType_ComboBox
    Case "Container"      : Result = #PB_GadgetType_Container
    Case "Date"           : Result = #PB_GadgetType_Date
    Case "Editor"         : Result = #PB_GadgetType_Editor
    Case "ExplorerCombo"  : Result = #PB_GadgetType_ExplorerCombo
    Case "ExplorerList"   : Result = #PB_GadgetType_ExplorerList
    Case "ExplorerTree"   : Result = #PB_GadgetType_ExplorerTree
    Case "Frame"          : Result = #PB_GadgetType_Frame
    Case "HyperLink"      : Result = #PB_GadgetType_HyperLink
    Case "Image"          : Result = #PB_GadgetType_Image
    Case "IPAddress"      : Result = #PB_GadgetType_IPAddress
    Case "ListIcon"       : Result = #PB_GadgetType_ListIcon
    Case "ListView"       : Result = #PB_GadgetType_ListView
    Case "MDI"            : Result = #PB_GadgetType_MDI
    Case "OpenGL"         : Result = #PB_GadgetType_OpenGL
    Case "Option"         : Result = #PB_GadgetType_Option
      ;Case "Popup"          : Result = #PB_GadgetType_Popup
    Case "Panel"          : Result = #PB_GadgetType_Panel
      ;Case "Property"       : Result = #PB_GadgetType_Property
    Case "ProgressBar"    : Result = #PB_GadgetType_ProgressBar
    Case "Scintilla"      : Result = #PB_GadgetType_Scintilla
    Case "ScrollArea"     : Result = #PB_GadgetType_ScrollArea
    Case "ScrollBar"      : Result = #PB_GadgetType_ScrollBar
    Case "Shortcut"       : Result = #PB_GadgetType_Shortcut
    Case "Spin"           : Result = #PB_GadgetType_Spin
    Case "Splitter"       : Result = #PB_GadgetType_Splitter
    Case "String"         : Result = #PB_GadgetType_String
    Case "Text"           : Result = #PB_GadgetType_Text
    Case "TrackBar"       : Result = #PB_GadgetType_TrackBar
    Case "Tree"           : Result = #PB_GadgetType_Tree
    Case "Unknown"        : Result = #PB_GadgetType_Unknown
    Case "Web"            : Result = #PB_GadgetType_Web
    Case "Window"         : Result = #__Type_Window
  EndSelect
  
  ProcedureReturn Result
EndProcedure

;-
;- PUBLICs
Procedure.i elements_list_fill(*id, Directory$)
  Protected ZipFile$ = Directory$ + "SilkTheme.zip"
  
  If FileSize(ZipFile$) < 1
    CompilerIf #PB_Compiler_OS = #PB_OS_Windows
      ZipFile$ = #PB_Compiler_Home+"themes\SilkTheme.zip"
    CompilerElse
      ZipFile$ = #PB_Compiler_Home+"themes/SilkTheme.zip"
    CompilerEndIf
    If FileSize(ZipFile$) < 1
      MessageRequester("Designer Error", "Themes\SilkTheme.zip Not found in the current directory" +#CRLF$+ "Or in PB_Compiler_Home\themes directory" +#CRLF$+#CRLF$+ "Exit now", #PB_MessageRequester_Error|#PB_MessageRequester_Ok)
      End
    EndIf
  EndIf
  ;   Directory$ = GetCurrentDirectory()+"images/" ; "";
  ;   Protected ZipFile$ = Directory$ + "images.zip"
  
  
  If FileSize(ZipFile$) > 0
    UsePNGImageDecoder()
    
    CompilerIf #PB_Compiler_Version > 522
      UseZipPacker()
    CompilerEndIf
    
    Protected PackEntryName.s, ImageSize, *Image, Image, ZipFile
    ZipFile = OpenPack(#PB_Any, ZipFile$, #PB_PackerPlugin_Zip)
    
    If ZipFile  
      If ExaminePack(ZipFile)
        While NextPackEntry(ZipFile)
          
          PackEntryName.S = PackEntryName(ZipFile)
          ImageSize = PackEntrySize(ZipFile)
          If ImageSize
            *Image = AllocateMemory(ImageSize)
            UncompressPackMemory(ZipFile, *Image, ImageSize)
            Image = CatchImage(#PB_Any, *Image, ImageSize)
            PackEntryName.S = ReplaceString(PackEntryName.S,".png","")
            If PackEntryName.S="application_form" 
              PackEntryName.S="vd_windowgadget"
            EndIf
            
            PackEntryName.S = ReplaceString(PackEntryName.S,"page_white_edit","vd_scintillagadget")   ;vd_scintillagadget.png not found. Use page_white_edit.png instead
            
            Select PackEntryType(ZipFile)
              Case #PB_Packer_File
                If Image
                  If FindString(Left(PackEntryName.S, 3), "vd_")
                    PackEntryName.S = ReplaceString(PackEntryName.S,"vd_"," ")
                    PackEntryName.S = Trim(ReplaceString(PackEntryName.S,"gadget",""))
                    
                    Protected Left.S = UCase(Left(PackEntryName.S,1))
                    Protected Right.S = Right(PackEntryName.S,Len(PackEntryName.S)-1)
                    PackEntryName.S = " "+Left.S+Right.S
                    
                    If FindString(LCase(PackEntryName.S), "cursor")
                      
                      ;Debug "add cursor"
                      AddItem(*id, 0, PackEntryName.S, Image)
                      SetItemData(*id, 0, Image)
                      
                      ;                   ElseIf FindString(LCase(PackEntryName.S), "window")
                      ;                     
                      ;                     Debug "add window"
                      ;                     AddItem(*id, 1, PackEntryName.S, Image)
                      ;                     SetItemData(*id, 1, Image)
                      
                    ElseIf FindString(LCase(PackEntryName.S), "buttonimage")
                    ElseIf FindString(LCase(PackEntryName.S), "window")
                      AddItem(*id, -1, PackEntryName.S, Image)
                      SetItemData(*id, CountItems(*id)-1, Image)
                    ElseIf FindString(LCase(PackEntryName.S), "button")
                      AddItem(*id, -1, PackEntryName.S, Image)
                      SetItemData(*id, CountItems(*id)-1, Image)
                    ElseIf FindString(LCase(PackEntryName.S), "container")
                      AddItem(*id, -1, PackEntryName.S, Image)
                      SetItemData(*id, CountItems(*id)-1, Image)
                    ElseIf FindString(LCase(PackEntryName.S), "panel")
                      AddItem(*id, -1, PackEntryName.S, Image)
                      SetItemData(*id, CountItems(*id)-1, Image)
                    ElseIf FindString(LCase(PackEntryName.S), "scrollarea")
                      AddItem(*id, -1, PackEntryName.S, Image)
                      SetItemData(*id, CountItems(*id)-1, Image)
                    EndIf
                  EndIf
                EndIf    
            EndSelect
            
            FreeMemory(*Image)
          EndIf
        Wend  
      EndIf
      
      ; select cursor
      SetState(*id, 0)
      ClosePack(ZipFile)
    EndIf
  EndIf
EndProcedure

Procedure update_properties(gadget.i, Value.i)
  SetItemText(gadget, #_pi_id,      GetItemText(gadget, #_pi_id)      +Chr(10)+Str(Value))
  SetItemText(gadget, #_pi_class,   GetItemText(gadget, #_pi_class)   +Chr(10)+GetClass(Value)+"_"+GetCount(Value))
  SetItemText(gadget, #_pi_text,    GetItemText(gadget, #_pi_text)    +Chr(10)+GetText(Value))
  
  SetItemText(gadget, #_pi_x,       GetItemText(gadget, #_pi_x)       +Chr(10)+Str(X(Value)))
  SetItemText(gadget, #_pi_y,       GetItemText(gadget, #_pi_y)       +Chr(10)+Str(Y(Value)))
  SetItemText(gadget, #_pi_width,   GetItemText(gadget, #_pi_width)   +Chr(10)+Str(Width(Value)))
  SetItemText(gadget, #_pi_height,  GetItemText(gadget, #_pi_height)  +Chr(10)+Str(Height(Value)))
  
  SetItemText(gadget, #_pi_disable, GetItemText(gadget, #_pi_disable) +Chr(10)+Str(Disable(Value)))
  SetItemText(gadget, #_pi_hide,    GetItemText(gadget, #_pi_hide)    +Chr(10)+Str(Hide(Value)))
EndProcedure





;-
Procedure.i start_select(*this._s_widget)
  ;;SetCursor(*this, #PB_Cursor_Cross)
  Redraw(*this\root)
  
  If StartDrawing( CanvasOutput(*this\root\canvas\gadget))
    Transform()\grab = GrabDrawingImage(#PB_Any, 0,0, *this\root\width, *this\root\height)
    StopDrawing()
  EndIf
  
  Transform()\id\x = Root()\mouse\delta\x + *this\x
  Transform()\id\y = Root()\mouse\delta\y + *this\y
  
  If Not Transform()\id\width
    Transform()\id\width = 50
  EndIf
  
  If Not Transform()\id\height
    Transform()\id\height = 50
  EndIf
  
  ProcedureReturn *this
EndProcedure

Procedure.i stop_select(*this._s_widget)
  If Transform()\grab
    SetCursor(*this, #PB_Cursor_Default)
    
    Transform()\id\x - *this\x[#__c_inner]
    Transform()\id\y - *this\y[#__c_inner]
    
    Transform()\grab = 0
    ProcedureReturn *this
  EndIf
EndProcedure

Procedure.i draw_select(*this._s_widget)
  Protected mouse_x, mouse_y, DeltaX, DeltaY
  
  If *this And GetButtons(*this)
    If Not Transform()
      InitTransform()
    EndIf
    
    mouse_x = *this\root\mouse\x
    mouse_y = *this\root\mouse\y
    
    Transform()\id\x = *this\root\mouse\delta\x + *this\root\focused\x
    Transform()\id\Y = *this\root\mouse\delta\y + *this\root\focused\y
  
    If Transform()\id\x > mouse_x
      Transform()\id\Width = Transform()\id\X - mouse_x
      Transform()\id\x = mouse_x
    Else
      Transform()\id\Width = mouse_x - Transform()\id\X
    EndIf
    
    If Transform()\id\Y > mouse_y
      Transform()\id\Height = Transform()\id\Y - mouse_y
      Transform()\id\Y = mouse_y
    Else
      Transform()\id\Height = mouse_y - Transform()\id\Y
    EndIf
    
    If Transform()\grab And 
       StartDrawing( CanvasOutput(*this\root\canvas\gadget) )
      DrawImage(ImageID(Transform()\grab), 0,0)
      
      ; draw selector
      DrawingMode(#PB_2DDrawing_Outlined|#PB_2DDrawing_AlphaBlend)
      Box(Transform()\id\x, Transform()\id\y, 
          Transform()\id\width, Transform()\id\height , $ff000000);Transform()\color[Transform()\state]\id) 
      
      StopDrawing()
      ProcedureReturn *this
    EndIf
  EndIf
EndProcedure

;-
Declare events_element()

Procedure add_element(gadget.i, *new._s_widget, Class.s)
  Protected Parent = GetParent(*new)
  Protected CountItems = CountItems(gadget)
  Protected *Sublevel, SubLevel ;= GetLevel(Parent) - 1 ; level mdi minus
  Protected i, Position = GetState(gadget) + 1  ; GetData(Parent) + 1 ; 
  
  ; get childrens position and sublevel
  For i = 0 To CountItems - 1
    If Parent = GetItemData(gadget, i)
      SubLevel = GetItemAttribute(gadget, i, #PB_Tree_SubLevel) + 1
      Position = (i+1)
      Break
    EndIf
  Next 
  
  ; 
  For i = Position To CountItems - 1
    If SubLevel <= GetItemAttribute(gadget, i, #PB_Tree_SubLevel)
      SetData( GetItemData(gadget, i), i)
      Position + 1
    EndIf
  Next 
  
  SetText(*new, Class)
  SetData(*new, Position)
      
  ; add to inspector
  AddItem(gadget, Position, Class.s, #PB_Default, SubLevel)
  SetItemData(gadget, Position, *new)
  ; SetItemState(gadget, Position, #PB_Tree_Selected)
  SetState(gadget, Position)
  
  AddGadgetItem(listview_debug, Position, Class.s, 0, SubLevel)
  SetGadgetItemData(listview_debug, Position, *new)
  ; SetGadgetItemState(listview_debug, Position, #PB_Tree_Selected)
  SetGadgetState(listview_debug, Position) ; Bug
  
  ;update_properties(id_properties_tree, *new)
  
  ; Debug "pos "+Position
  ;Add_Code(*new, Position-1, SubLevel)
  
  ProcedureReturn Position
EndProcedure

Procedure create_element(*parent._s_widget, class.s, x.l,y.l, width.l=0, height.l=0)
  Protected *new._s_widget, *param1, *param2, *param3
  Protected Position =- 1, flag.i
  
  If *parent 
    If Not *parent\mode\transform
      a_add(*parent)
    EndIf
    
    class.s = LCase(Trim(class))
    OpenList(*parent, GetState(*parent)) 
    
    ; create elements
    Select class
      Case "window"    
        If GetType(*parent) = #PB_GadgetType_MDI
          *new = AddItem(*parent, #PB_Any, "", - 1, flag)
        Else
          *new = Window(x,y,width,height, "", flag, *parent)
        EndIf
        
        Bind(*new, @events_element())
        
      Case "panel"      : *new = Panel(x,y,width,height, flag)
      Case "container"  : *new = Container(x,y,width,height, flag)
      Case "scrollarea" : *new = ScrollArea(x,y,width,height, *param1, *param2, *param3, flag)
      Case "button"     : *new = Button(x,y,width,height, "", flag)
    EndSelect
    
    If *new
      If *new\container
        ;  SetImage(*new, 5)
      EndIf
      
      Class.s = GetClass(*new)+"_"+GetCount(*new)
      add_element(id_inspector_tree, *new, Class.s)
    EndIf
    
    CloseList() 
  EndIf
  
  ProcedureReturn *new
EndProcedure

Procedure events_element()
  Protected e_type = *event\type
  Protected *this._s_widget = *event\widget
  Static Drag
  
  Select e_type 
    Case #PB_EventType_MouseEnter
      If GetState(id_elements) > 0 And *this\container 
        SetCursor(*this, #PB_Cursor_Cross)
      EndIf
    
    Case #PB_EventType_MouseLeave
      If GetState(id_elements) > 0 And *this\container 
        SetCursor(*this, #PB_Cursor_Default)
      EndIf
    
    Case #PB_EventType_MouseMove
      If Drag
        If Not draw_select(Drag)
          Drag = 0
        EndIf
      EndIf
      
    Case #PB_EventType_LeftButtonDown
      If GetState(id_elements) > 0 And *this\container 
        Drag = start_select(*this)
      EndIf
      
    Case #PB_EventType_LeftButtonUp
      If GetState(id_elements) > 0
        If stop_select(*this)
          
          create_element(*this, GetText(id_elements),
                         Transform()\id\x,
                         Transform()\id\y, 
                         Transform()\id\width, 
                         Transform()\id\height)
          
          Drag = 0
        EndIf
        
        SetState(id_elements, 0)
      EndIf
      
    Case #PB_EventType_StatusChange
      SetState(id_inspector_tree, GetData(*this))
      SetGadgetState(listview_debug, GetData(*this))
      update_properties(id_properties_tree, *this)
      
  EndSelect
  
EndProcedure


;-
Procedure events_ide()
  Protected *this._s_widget
  Protected e_type = *event\type
  Protected e_item = *event\item
  Protected e_widget = *event\widget
  
  Select e_type
    Case #PB_EventType_StatusChange
      SetText(id_help_text, GetItemText(e_widget, e_item))
      
    Case #PB_EventType_Change
      If e_widget = id_inspector_tree
        *this = GetItemData(e_widget, GetState(e_widget))
        
        If *this 
          a_set(*this)
        EndIf
      EndIf
      
    Case #PB_EventType_LeftClick
      If e_widget = id_elements
        Debug "click"
      EndIf
      
  EndSelect
EndProcedure

Procedure create_ide(x=100,y=100,width=800,height=600)
  Define flag = #PB_Window_SystemMenu|#PB_Window_SizeGadget|#PB_Window_MaximizeGadget|#PB_Window_MinimizeGadget
  Define root = widget::Open(OpenWindow(#PB_Any, x,y,width,height, "ide", flag))
  window_ide = widget::GetWindow(root)
  canvas_ide = widget::GetGadget(root)
  
  toolbar_design = 0
  
  ;   id_design_panel = Panel(0,0,0,0) ; , #__bar_vertical) : OpenList(id_design_panel)
  ;   AddItem(id_design_panel, -1, "Form")
  ;   id_design_form = MDI(0,0,0,0, #__flag_autosize) 
  ;   
  ;   AddItem(id_design_panel, -1, "Code")
  ;   id_design_code = Editor(0,0,0,0, #__flag_autosize) 
  ;   CloseList()
  
  id_inspector_tree = Tree(0,0,0,0)
  listview_debug = TreeGadget(-1,0,0,0,0) ; ListView(0,0,0,0) 
  
  id_design_form = MDI(0,0,0,0) 
  id_design_panel = id_design_form
  ;id_design_code = listview_debug
  
  id_inspector_panel = Panel(0,0,0,0)
  
  AddItem(id_inspector_panel, -1, "elements", 0, 0) 
  id_elements = Tree(0,0,0,0, #__flag_autosize|#__flag_NoButtons|#__flag_NoLines)
  
  AddItem(id_inspector_panel, -1, "properties", 0, 0)  
  id_properties_tree = Tree_Properties(0,0,0,0, #__flag_autosize)
  If id_properties_tree
    AddItem(id_properties_tree, #_pi_group_0,  "Common")
    AddItem(id_properties_tree, #_pi_id,       "ID"      , #PB_GadgetType_String, 1)
    AddItem(id_properties_tree, #_pi_class,    "Class"   , #PB_GadgetType_String, 1)
    AddItem(id_properties_tree, #_pi_text,     "Text"    , #PB_GadgetType_String, 1)
    
    AddItem(id_properties_tree, #_pi_group_1,  "Layout")
    AddItem(id_properties_tree, #_pi_x,        "X"       , #PB_GadgetType_Spin, 1)
    AddItem(id_properties_tree, #_pi_y,        "Y"       , #PB_GadgetType_Spin, 1)
    AddItem(id_properties_tree, #_pi_width,    "Width"   , #PB_GadgetType_Spin, 1)
    AddItem(id_properties_tree, #_pi_height,   "Height"  , #PB_GadgetType_Spin, 1)
    
    AddItem(id_properties_tree, #_pi_group_2,  "State")
    AddItem(id_properties_tree, #_pi_disable,  "Disable" , #PB_GadgetType_ComboBox, 1)
    AddItem(id_properties_tree, #_pi_hide,     "Hide"    , #PB_GadgetType_ComboBox, 1)
  EndIf
  
  AddItem(id_inspector_panel, -1, "events", 0, 0)  
  id_events_tree = Tree_Properties(0,0,0,0, #__flag_autosize) 
  AddItem(id_events_tree, #_ei_leftclick,  "LeftClick")
  AddItem(id_events_tree, #_ei_change,  "Change")
  AddItem(id_events_tree, #_ei_enter,  "Enter")
  AddItem(id_events_tree, #_ei_leave,  "Leave")
  
  CloseList()
  
  id_help_text  = Text(0,0,0,0, "help for the inspector", #__text_border)
  
  
  Splitter_design = widget::Splitter(0,0,0,0, toolbar_design,id_design_panel, #PB_Splitter_FirstFixed|#PB_Splitter_Separator)
  Splitter_inspector = widget::Splitter(0,0,0,0, id_inspector_tree,id_inspector_panel, #PB_Splitter_FirstFixed)
  splitter_debug = widget::Splitter(0,0,0,0, Splitter_design,listview_debug, #PB_Splitter_SecondFixed)
  splitter_help = widget::Splitter(0,0,0,0, Splitter_inspector,id_help_text, #PB_Splitter_SecondFixed)
  Splitter_ide = widget::Splitter(0,0,0,0, splitter_debug,splitter_help, #__flag_autosize|#PB_Splitter_Vertical|#PB_Splitter_SecondFixed)
  
  ; set splitters default minimum size
  widget::SetAttribute(Splitter_ide, #PB_Splitter_FirstMinimumSize, 500)
  widget::SetAttribute(Splitter_ide, #PB_Splitter_SecondMinimumSize, 120)
  widget::SetAttribute(splitter_help, #PB_Splitter_SecondMinimumSize, 30)
  widget::SetAttribute(splitter_debug, #PB_Splitter_SecondMinimumSize, 100)
  widget::SetAttribute(Splitter_inspector, #PB_Splitter_FirstMinimumSize, 100)
  widget::SetAttribute(Splitter_design, #PB_Splitter_FirstMinimumSize, 20)
  ; widget::SetAttribute(Splitter_design, #PB_Splitter_SecondMinimumSize, $ffffff)
  
  ; set splitters dafault positions
  widget::SetState(Splitter_ide, widget::width(Splitter_ide)-220)
  widget::SetState(splitter_help, widget::height(splitter_help)-80)
  widget::SetState(splitter_debug, widget::height(splitter_debug)-150)
  widget::SetState(Splitter_inspector, 150)
  widget::SetState(Splitter_design, 30)
  
  
  Bind(id_inspector_tree, @events_ide())
  Bind(id_elements, @events_ide())
  ProcedureReturn window_ide
EndProcedure

;-
CompilerIf #PB_Compiler_IsMainFile 
  Define event
  create_ide()
  
  elements_list_fill(id_elements, GetCurrentDirectory()+"Themes/")
  
  ;   ;OpenList(id_design_form)
  Define *window = create_element(id_design_form, "window", 10, 10, 350, 200)
    Define *container = create_element(*window, "container", 80, 10, 220, 140)
    create_element(*container, "button", 10, 20, 100, 30)
    create_element(*window, "button", 10, 20, 100, 30)
    
    Define item = 1
    SetState(id_inspector_tree, item)
    SetGadgetState(listview_debug, item)
    
    Define *container2 = create_element(*container, "container", 80, 10, 220, 140)
    create_element(*container2, "button", 10, 20, 100, 30)
    
    SetState(id_inspector_tree, 0)
    create_element(*window, "button", 10, 20, 100, 30)
    
  ;   Define *window = create_element(id_design_form, "window", 10, 10)
  ;   Define *container = create_element(*window, "container", 80, 10)
  ;   create_element(*container, "button", -10, 20)
  ;   create_element(*window, "button", 10, 20)
  ;   ;CloseList()
  
  Repeat 
    event = WaitWindowEvent() 
    
    ;     Select EventWindow()
    ;       Case window_ide 
    ;         ide_window_events(event)
    ;     EndSelect
    
  Until event = #PB_Event_CloseWindow
CompilerEndIf
; IDE Options = PureBasic 5.72 (MacOS X - x64)
; Folding = ---X--f1--
; EnableXP