;XIncludeFile "widgets.pbi"
XIncludeFile "widgets.pbi"

;
; This code is automatically generated by the FormDesigner.
; Manual modification is possible to adjust existing commands, but anything else will be dropped when the code is compiled.
; Event procedures needs to be put in another source file.
;

;- EXAMPLE
CompilerIf #PB_Compiler_IsMainFile ;= 100
  EnableExplicit
  UseModule Widget
  
  Global Window_0, Canvas_0, winBackColor = $FFFFFF
  Global NewMap Widgets.i()
  Global *Widget.Widget_S, *Parent.Widget_S, x,y
  Global *Window.Widget_S
  
  If CreateImage(5, 600,600, 32,#PB_Image_Transparent) And StartDrawing(ImageOutput(5))
    DrawingMode(#PB_2DDrawing_AllChannels) 
    For x=0 To 600 Step 5
      For y=0 To 600 Step 5
        Line(x, y, 1,1, $FF000000)
      Next y
    Next x
    StopDrawing()
  EndIf
  
  Procedure.i Load_Widgets(Widget, Directory$)
    Protected ZipFile$ = Directory$ + "SilkTheme.zip"
    
    If FileSize(ZipFile$) < 1
      CompilerIf #PB_Compiler_OS = #PB_OS_Windows
        ZipFile$ = #PB_Compiler_Home+"themes\SilkTheme.zip"
      CompilerElse
        ZipFile$ = #PB_Compiler_Home+"themes/SilkTheme.zip"
      CompilerEndIf
      If FileSize(ZipFile$) < 1
        MessageRequester("Designer Error", "Themes\SilkTheme.zip Not found in the current directory" +#CRLF$+ "Or in PB_Compiler_Home\themes directory" +#CRLF$+#CRLF$+ "Exit now", #PB_MessageRequester_Error|#PB_MessageRequester_Ok)
        End
      EndIf
    EndIf
    ;   Directory$ = GetCurrentDirectory()+"images/" ; "";
    ;   Protected ZipFile$ = Directory$ + "images.zip"
    
    
    If FileSize(ZipFile$) > 0
      UsePNGImageDecoder()
      
      CompilerIf #PB_Compiler_Version > 522
        UseZipPacker()
      CompilerEndIf
      
      Protected PackEntryName.s, ImageSize, *Image, Image, ZipFile
      ZipFile = OpenPack(#PB_Any, ZipFile$, #PB_PackerPlugin_Zip)
      
      If ZipFile  
        If ExaminePack(ZipFile)
          While NextPackEntry(ZipFile)
            
            PackEntryName.S = PackEntryName(ZipFile)
            ImageSize = PackEntrySize(ZipFile)
            If ImageSize
              *Image = AllocateMemory(ImageSize)
              UncompressPackMemory(ZipFile, *Image, ImageSize)
              Image = CatchImage(#PB_Any, *Image, ImageSize)
              PackEntryName.S = ReplaceString(PackEntryName.S,".png","")
              If PackEntryName.S="application_form" 
                PackEntryName.S="vd_windowgadget"
              EndIf
              
              PackEntryName.S = ReplaceString(PackEntryName.S,"page_white_edit","vd_scintillagadget")   ;vd_scintillagadget.png not found. Use page_white_edit.png instead
              
              Select PackEntryType(ZipFile)
                Case #PB_Packer_File
                  If Image
                    If FindString(Left(PackEntryName.S, 3), "vd_")
                      PackEntryName.S = ReplaceString(PackEntryName.S,"vd_"," ")
                      PackEntryName.S = Trim(ReplaceString(PackEntryName.S,"gadget",""))
                      
                      Protected Left.S = UCase(Left(PackEntryName.S,1))
                      Protected Right.S = Right(PackEntryName.S,Len(PackEntryName.S)-1)
                      PackEntryName.S = " "+Left.S+Right.S
                      
                      If FindString(LCase(PackEntryName.S), "cursor")
                        
                        ;Debug "add cursor"
                        AddItem(Widget, 0, PackEntryName.S, Image)
                        SetItemData(Widget, 0, Image)
                        
                        ;                   ElseIf FindString(LCase(PackEntryName.S), "window")
                        ;                     
                        ;                     Debug "add window"
                        ;                     AddItem(Widget, 1, PackEntryName.S, Image)
                        ;                     SetItemData(Widget, 1, Image)
                        
                      Else
                        AddItem(Widget, -1, PackEntryName.S, Image)
                        SetItemData(Widget, CountItems(Widget)-1, Image)
                      EndIf
                    EndIf
                  EndIf    
              EndSelect
              
              FreeMemory(*Image)
            EndIf
          Wend  
        EndIf
        
        ClosePack(ZipFile)
      EndIf
    EndIf
  EndProcedure
  
  Procedure.s Help_Widgets(Class.s)
    Protected Result.S
    
    Select LCase(Trim(Class.s))
      Case "window"
        Result.S = "Это окно (Window)"
        
      Case "cursor"
        Result.S = "Это курсор"
        
      Case "scintilla"
        Result.S = "Это редактор (Scintilla)"
        
      Case "button"
        Result.S = "Это кнопка (Button)"
        
      Case "buttonimage"
        Result.S = "Это кнопка картинка (ButtonImage)"
        
      Case "checkbox"
        Result.S = "Это переключатель (CheckBox)"
        
      Case "container"
        Result.S = "Это контейнер для других элементов (Container)"
        
      Case "combobox"
        Result.S = "Это выподающий список (ComboBox)"
        
      Default
        Result.S = "Подсказка еще не реализованно"
        
    EndSelect
    
    ProcedureReturn Result.S
  EndProcedure
  
  Procedure.s Help_Properties(Class.s)
    Protected Result.S
    
    Select Trim(Class.s, ":")
      Case "Text"
        Result.S = "Это надпись на виджете"
        
      Case "X"
        Result.S = "Это позиция по оси X"
        
      Case "Y"
        Result.S = "Это позиция по оси Y"
        
      Case "Width"
        Result.S = "Это ширина виджета"
        
      Case "Height"
        Result.S = "Это высота виджета"
        
      Default
        Result.S = "Подсказка еще не реализованно"
        
    EndSelect
    
    ProcedureReturn Result.S
  EndProcedure
  
  ;-
  Procedure Update_Inspector(Value.i)
    SetState(Widgets("Inspector"), GetData(Value))
    SetItemText(Widgets("Properties"), 1, Str(Value))
    SetItemText(Widgets("Properties"), 2, GetClass(Value)+"_"+GetCount(Value))
    SetItemText(Widgets("Properties"), 3, GetText(Value))
    SetItemText(Widgets("Properties"), 5, Str(X(Value)))
    SetItemText(Widgets("Properties"), 6, Str(Y(Value)))
    SetItemText(Widgets("Properties"), 7, Str(Width(Value)))
    SetItemText(Widgets("Properties"), 8, Str(Height(Value)))
  EndProcedure
  
  Procedure.i SetAnchors(*This.Widget_S)
    Protected Result.i
    Static *Last.Widget_S
    
    With *This
      If *This\anchor[9] And *Last <> *This
        If *Last
;           *Last\Focus = 0
          *Last\anchor = 0
          
;           If *Last\Parent
; ;           \Parent\Focus = 1
;           *Last\Parent\anchor = 0
;           EndIf
        EndIf
        
;         \Focus = 1
        \anchor = \anchor[9]
        
;         If \Window
; ;           \Window\Focus = 1
;          \Window\anchor = \Window\anchor[9]
;         EndIf
;         
;         If \Parent
; ;           \Parent\Focus = 1
;           \Parent\anchor = \Parent\anchor[9]
;         EndIf
        
        *Last = *This
        Result = 1
      EndIf
    EndWith
    
    ProcedureReturn Result
  EndProcedure
  
  Procedure.i AddWidget(Tree, Parent, Type);, X,Y,Width,Height)
    Protected *This.Widget_S, Class.s, Level.i, Item.i
    Static X, Y
    Protected Width = 100, Height = 100
    
    If Parent
      OpenList(Parent, 0)
    EndIf
    
    Select Type
      Case #PB_GadgetType_Window    
        *This = Window(20,20,Width*3,Height*2, "", #PB_Flag_AnchorsGadget, Parent) : X = 0 : Y = 0
      Case #PB_GadgetType_Container : *This = Container(X,Y,Width,Height, #PB_Flag_AnchorsGadget) : X = 0 : Y = 0
      Case #PB_GadgetType_Button    : *This = Button(X,Y,Width,Height, "", #PB_Flag_AnchorsGadget)
    EndSelect
    
    X + 10
    Y + 10
    
    If *This
      Class.s = GetClass(*This)+"_"+GetCount(*This)
      Level = GetLevel(*This) - GetLevel(GetWindow(*This))
      SetText(*This, Class.s)
      
      AddItem(Tree, #PB_Any, Class.s, #PB_Default, Level )
      Item = CountItems(Tree)-1
      SetItemData(Tree, Item, *This)
      SetData(*This, Item)
      
      If SetAnchors(*This)
        Update_Inspector(*This)
      EndIf
      
      Debug "set - "+Item +" "+ *This
    EndIf
    
    ProcedureReturn *This
  EndProcedure
  
  ;-
  Procedure Widgets_Events(EventWidget.i, EventType.i, EventItem.i, EventData.i)
    ; Debug ""+EventType() +" "+ WidgetEventType() +" "+ EventWidget() +" "+ EventGadget() +" "+ EventData()
    ;Protected EventWidget = EventWidget()
    Static *Last, LostFocus
    Protected *This.Widget_S
    
    Select EventType ; WidgetEvent()
      Case #PB_EventType_LeftClick
        Select EventWidget
          Case Widgets("Button_1")
            Debug 7777777
            *Window = Popup(EventWidget, #PB_Ignore,#PB_Ignore,280,130)
            
            OpenList(*Window)
            Widgets("Widgets_0") = Tree(0, 0, 280, 130, #PB_Flag_NoButtons|#PB_Flag_NoLines)
            Load_Widgets(Widgets("Widgets_0"), GetCurrentDirectory()+"Themes/")
            SetState(Widgets("Widgets_0"), 1)
            CloseList()
            
            ; Draw_Popup(*Window)
        EndSelect
          
      Case #PB_EventType_StatusChange
        Select EventWidget
          Case Widgets("Widgets") 
            SetText(Widgets("Widgets_info"), Help_Widgets(GetItemText(EventWidget, EventItem)))
            
            SetItemAttribute(Widgets("Panel"), GetState(Widgets("Panel")), #PB_Button_Image, GetItemData(EventWidget, EventItem)) ; GetState(EventWidget)))
            
          Case Widgets("Properties") 
            SetText(Widgets("Properties_info"), Help_Properties(GetItemText(EventWidget, EventItem)))
        EndSelect
        
      Case #PB_EventType_LeftButtonUp
        *This = GetAnchors(EventWidget)
        
        If *This
           Debug "изменено up "+ *This
           Update_Inspector(*This)
        EndIf
        
      Case #PB_EventType_LeftButtonDown
        *This = GetAnchors(EventWidget)
        
        If *This And SetAnchors(*This)
          Debug "изменено down"+ *This
          Update_Inspector(*This)
        EndIf
        
        
      Case #PB_EventType_Change
        Select EventWidget
          Case Widgets("Inspector") 
            *This = GetItemData(EventWidget, GetState(EventWidget))
            
            If *This And SetAnchors(*This)
              Debug "изменено "+ *This
              Update_Inspector(*This)
            EndIf
        EndSelect
       
    EndSelect
    
    ; ReDraw(Canvas_0)
  EndProcedure
  
  Procedure Window_0_Resize()
    ResizeGadget(Canvas_0, #PB_Ignore, #PB_Ignore, WindowWidth(Window_0)-20, WindowHeight(Window_0)-50)
  EndProcedure
  
  ;-
  Procedure Window_0_Open(x = 0, y = 0, width = 800, height = 600)
    Window_0 = OpenWindow(#PB_Any, x, y, width, height, "", #PB_Window_SystemMenu|#PB_Window_SizeGadget)
    BindEvent(#PB_Event_SizeWindow, @Window_0_Resize(), Window_0)
    
    If Open(Window_0, 10, 40, 780, 550, "IDE") 
      Canvas_0 = Display()
      
      ; Main panel
      Widgets("Panel") = Panel(0, 0, 0, 0) 
      
      ; panel tab new forms
      AddItem(Widgets("Panel"), -1, "Form")
      
      
      ; panel tab code
      AddItem(Widgets("Panel"), -1, "Code")
      Widgets("Code") = Text(0, 0, 180, 230, "Тут будут строки кода", #PB_Flag_AutoSize)
      CloseList()
      
      ;{- inspector 
      ; create tree inspector
      Widgets("Inspector") = Tree(0, 0, 80, 30)

      ; create panel widget
      Widgets("Inspector_panel") = Panel(0, 0, 0, 0) 
      
      ; Panel tab "properties"
      AddItem(Widgets("Inspector_panel"), -1, "Properties")
      Widgets("Properties") = Property(0, 0, 150, 30, 70, #PB_Flag_AutoSize)
      ; SetColor(Widgets("Properties"))
      
      AddItem(Widgets("Properties"), -1, " Общее", -1, 0)
      AddItem(Widgets("Properties"), -1, "String Handle ", -1, 1)
      AddItem(Widgets("Properties"), -1, "String Class ", -1, 1)
      AddItem(Widgets("Properties"), -1, "String Text ", -1, 1)
      AddItem(Widgets("Properties"), -1, " Координаты", -1, 0)
      AddItem(Widgets("Properties"), -1, "Spin X 0|100", -1, 1)
      AddItem(Widgets("Properties"), -1, "Spin Y 0|200", -1, 1)
      AddItem(Widgets("Properties"), -1, "Spin Width 0|100", -1, 1)
      AddItem(Widgets("Properties"), -1, "Spin Height 0|200", -1, 1)
      AddItem(Widgets("Properties"), -1, " Поведение", -1, 0)
      AddItem(Widgets("Properties"), -1, "Button Puch C:\as\img\image.png", -1, 1)
      AddItem(Widgets("Properties"), -1, "ComboBox Disable True|False", -1, 1)
      AddItem(Widgets("Properties"), -1, "ComboBox Flag #_Event_Close|#_Event_Size|#_Event_Move", -1, 1)
      Widgets("Properties_info") = Text(0, 0, 80, 30, "Тут будет инфо о свойстве")
      Widgets("Properties_splitter") = Splitter(1,1,778, 548, Widgets("Properties"), Widgets("Properties_info"), #PB_Flag_AutoSize)
      SetState(Widgets("Properties_splitter"), 450)
      
      ; Panel tab "widgets"
      AddItem(Widgets("Inspector_panel"), -1, "Widgets")
      Widgets("Widgets") = Tree(0, 0, 80, 30, #PB_Flag_NoButtons|#PB_Flag_NoLines)
      Load_Widgets(Widgets("Widgets"), GetCurrentDirectory()+"Themes/")
      SetState(Widgets("Widgets"), 1)
      Widgets("Widgets_info") = Text(0, 0, 80, 30, "Тут будет инфо о виджете")
      Widgets("Widgets_splitter") = Splitter(1,1,778, 548, Widgets("Widgets"), Widgets("Widgets_info"), #PB_Flag_AutoSize)
      SetState(Widgets("Widgets_splitter"), 450)
      
      ; Panel tab "events"
      AddItem(Widgets("Inspector_panel"), -1, "Events")
      Widgets("Events") = Text(0, 60, 180, 30, "Тут будет событие элементов", #PB_Flag_AutoSize)
      Widgets("Events_info") = Text(0, 0, 80, 30, "Тут будет инфо о событии")
      Widgets("Events_splitter") = Splitter(1,1,778, 548, Widgets("Events"), Widgets("Events_info"), #PB_Flag_AutoSize)
      SetState(Widgets("Events_splitter"), 450)
      CloseList()
      
      Widgets("Inspector_splitter") = Splitter(1,1,778, 548, Widgets("Inspector"), Widgets("Inspector_panel"))
      ;}
      
      Widgets("Splitter") = Splitter(1,1,778, 548, Widgets("Panel"), Widgets("Inspector_splitter"), #PB_Splitter_Vertical|#PB_Flag_AutoSize)
      
      SetState(Widgets("Inspector_splitter"), 150)
      SetState(Widgets("Splitter"), 550)
    EndIf
    
    
    Define *n=AddWidget(Widgets("Inspector"), Widgets("Panel"), #PB_GadgetType_Window)
    ;AddWidget(Widgets("Inspector"), *n, #PB_GadgetType_Window)
    AddWidget(Widgets("Inspector"), 0, #PB_GadgetType_Button)
    AddWidget(Widgets("Inspector"), 0, #PB_GadgetType_Button)
    AddWidget(Widgets("Inspector"), 0, #PB_GadgetType_Container)
    AddWidget(Widgets("Inspector"), 0, #PB_GadgetType_Button)
    AddWidget(Widgets("Inspector"), 0, #PB_GadgetType_Button)
    ;CloseList()
    AddWidget(Widgets("Inspector"), *n, #PB_GadgetType_Button)
    
    ;Bind(@Widgets_Events(), Widgets("Form_0")) ; Widgets events callback
    Bind(@Widgets_Events()) ; Widgets events callback
    
    ;SetActiveGadget(Canvas_0)
    ReDraw(Canvas_0)
  EndProcedure
  
  Procedure Window_0_Events(event)
    Select event
      Case #PB_Event_CloseWindow
        ProcedureReturn #False
        
      Case #PB_Event_Menu
        Select EventMenu()
        EndSelect
        
      Case #PB_Event_Gadget
        Select EventGadget()
        EndSelect
    EndSelect
    
    ProcedureReturn #True
  EndProcedure
  
  Window_0_Open()
  
  Repeat
    Select WaitWindowEvent()
      Case #PB_Event_CloseWindow
        Break
      Case #PB_Event_Gadget
        
    EndSelect
  ForEver
CompilerEndIf
; IDE Options = PureBasic 5.70 LTS (MacOS X - x64)
; Folding = --------
; EnableXP