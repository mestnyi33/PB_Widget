XIncludeFile "widgets.pbi"
;
; This code is automatically generated by the FormDesigner.
; Manual modification is possible to adjust existing commands, but anything else will be dropped when the code is compiled.
; Event procedures needs to be put in another source file.
;

;- EXAMPLE
EnableExplicit
Uselib(widget)

;- GLOBALs
Global window_ide, canvas_ide

Global Splitter_ide, Splitter_design, splitter_debug, Splitter_inspector, splitter_help
Global toolbar_design, listview_debug, text_help
Global id_design, id_elements, id_properties_tree, id_inspector_tree, id_inspector_panel

;- ENUMs
Enumeration 
  #_pi_id
  #_pi_class
  #_pi_text
  
  #_pi_x
  #_pi_y
  #_pi_width
  #_pi_height
EndEnumeration




Procedure.i GetClassType(Class.s)
  Protected Result.i
  
  Select Trim(Class.s)
    Case "Button"         : Result = #PB_GadgetType_Button
    Case "ButtonImage"    : Result = #PB_GadgetType_ButtonImage
    Case "Calendar"       : Result = #PB_GadgetType_Calendar
    Case "Canvas"         : Result = #PB_GadgetType_Canvas
    Case "CheckBox"       : Result = #PB_GadgetType_CheckBox
    Case "ComboBox"       : Result = #PB_GadgetType_ComboBox
    Case "Container"      : Result = #PB_GadgetType_Container
    Case "Date"           : Result = #PB_GadgetType_Date
    Case "Editor"         : Result = #PB_GadgetType_Editor
    Case "ExplorerCombo"  : Result = #PB_GadgetType_ExplorerCombo
    Case "ExplorerList"   : Result = #PB_GadgetType_ExplorerList
    Case "ExplorerTree"   : Result = #PB_GadgetType_ExplorerTree
    Case "Frame"          : Result = #PB_GadgetType_Frame
    Case "HyperLink"      : Result = #PB_GadgetType_HyperLink
    Case "Image"          : Result = #PB_GadgetType_Image
    Case "IPAddress"      : Result = #PB_GadgetType_IPAddress
    Case "ListIcon"       : Result = #PB_GadgetType_ListIcon
    Case "ListView"       : Result = #PB_GadgetType_ListView
    Case "MDI"            : Result = #PB_GadgetType_MDI
    Case "OpenGL"         : Result = #PB_GadgetType_OpenGL
    Case "Option"         : Result = #PB_GadgetType_Option
      ;Case "Popup"          : Result = #PB_GadgetType_Popup
    Case "Panel"          : Result = #PB_GadgetType_Panel
      ;Case "Property"       : Result = #PB_GadgetType_Property
    Case "ProgressBar"    : Result = #PB_GadgetType_ProgressBar
    Case "Scintilla"      : Result = #PB_GadgetType_Scintilla
    Case "ScrollArea"     : Result = #PB_GadgetType_ScrollArea
    Case "ScrollBar"      : Result = #PB_GadgetType_ScrollBar
    Case "Shortcut"       : Result = #PB_GadgetType_Shortcut
    Case "Spin"           : Result = #PB_GadgetType_Spin
    Case "Splitter"       : Result = #PB_GadgetType_Splitter
    Case "String"         : Result = #PB_GadgetType_String
    Case "Text"           : Result = #PB_GadgetType_Text
    Case "TrackBar"       : Result = #PB_GadgetType_TrackBar
    Case "Tree"           : Result = #PB_GadgetType_Tree
    Case "Unknown"        : Result = #PB_GadgetType_Unknown
    Case "Web"            : Result = #PB_GadgetType_Web
    Case "Window"         : Result = #__Type_Window
  EndSelect
  
  ProcedureReturn Result
EndProcedure


;- PUBLICs
Procedure.i elements_list_fill(*id, Directory$)
  Protected ZipFile$ = Directory$ + "SilkTheme.zip"
  
  If FileSize(ZipFile$) < 1
    CompilerIf #PB_Compiler_OS = #PB_OS_Windows
      ZipFile$ = #PB_Compiler_Home+"themes\SilkTheme.zip"
    CompilerElse
      ZipFile$ = #PB_Compiler_Home+"themes/SilkTheme.zip"
    CompilerEndIf
    If FileSize(ZipFile$) < 1
      MessageRequester("Designer Error", "Themes\SilkTheme.zip Not found in the current directory" +#CRLF$+ "Or in PB_Compiler_Home\themes directory" +#CRLF$+#CRLF$+ "Exit now", #PB_MessageRequester_Error|#PB_MessageRequester_Ok)
      End
    EndIf
  EndIf
  ;   Directory$ = GetCurrentDirectory()+"images/" ; "";
  ;   Protected ZipFile$ = Directory$ + "images.zip"
  
  
  If FileSize(ZipFile$) > 0
    UsePNGImageDecoder()
    
    CompilerIf #PB_Compiler_Version > 522
      UseZipPacker()
    CompilerEndIf
    
    Protected PackEntryName.s, ImageSize, *Image, Image, ZipFile
    ZipFile = OpenPack(#PB_Any, ZipFile$, #PB_PackerPlugin_Zip)
    
    If ZipFile  
      If ExaminePack(ZipFile)
        While NextPackEntry(ZipFile)
          
          PackEntryName.S = PackEntryName(ZipFile)
          ImageSize = PackEntrySize(ZipFile)
          If ImageSize
            *Image = AllocateMemory(ImageSize)
            UncompressPackMemory(ZipFile, *Image, ImageSize)
            Image = CatchImage(#PB_Any, *Image, ImageSize)
            PackEntryName.S = ReplaceString(PackEntryName.S,".png","")
            If PackEntryName.S="application_form" 
              PackEntryName.S="vd_windowgadget"
            EndIf
            
            PackEntryName.S = ReplaceString(PackEntryName.S,"page_white_edit","vd_scintillagadget")   ;vd_scintillagadget.png not found. Use page_white_edit.png instead
            
            Select PackEntryType(ZipFile)
              Case #PB_Packer_File
                If Image
                  If FindString(Left(PackEntryName.S, 3), "vd_")
                    PackEntryName.S = ReplaceString(PackEntryName.S,"vd_"," ")
                    PackEntryName.S = Trim(ReplaceString(PackEntryName.S,"gadget",""))
                    
                    Protected Left.S = UCase(Left(PackEntryName.S,1))
                    Protected Right.S = Right(PackEntryName.S,Len(PackEntryName.S)-1)
                    PackEntryName.S = " "+Left.S+Right.S
                    
                    If FindString(LCase(PackEntryName.S), "cursor")
                      
                      ;Debug "add cursor"
                      AddItem(*id, 0, PackEntryName.S, Image)
                      SetItemData(*id, 0, Image)
                      
                      ;                   ElseIf FindString(LCase(PackEntryName.S), "window")
                      ;                     
                      ;                     Debug "add window"
                      ;                     AddItem(*id, 1, PackEntryName.S, Image)
                      ;                     SetItemData(*id, 1, Image)
                      
                    ElseIf FindString(LCase(PackEntryName.S), "buttonimage")
                    ElseIf FindString(LCase(PackEntryName.S), "window")
                      AddItem(*id, -1, PackEntryName.S, Image)
                      SetItemData(*id, CountItems(*id)-1, Image)
                    ElseIf FindString(LCase(PackEntryName.S), "button")
                      AddItem(*id, -1, PackEntryName.S, Image)
                      SetItemData(*id, CountItems(*id)-1, Image)
                    ElseIf FindString(LCase(PackEntryName.S), "container")
                      AddItem(*id, -1, PackEntryName.S, Image)
                      SetItemData(*id, CountItems(*id)-1, Image)
                    ElseIf FindString(LCase(PackEntryName.S), "panel")
                      AddItem(*id, -1, PackEntryName.S, Image)
                      SetItemData(*id, CountItems(*id)-1, Image)
                    ElseIf FindString(LCase(PackEntryName.S), "scrollarea")
                      AddItem(*id, -1, PackEntryName.S, Image)
                      SetItemData(*id, CountItems(*id)-1, Image)
                    EndIf
                  EndIf
                EndIf    
            EndSelect
            
            FreeMemory(*Image)
          EndIf
        Wend  
      EndIf
      
      ClosePack(ZipFile)
    EndIf
  EndIf
EndProcedure

Procedure properties_update(*this._s_widget, Value.i)
  ;     SetState(Widgets("Inspector"), GetData(Value))
  ;     SetGadgetState(WE_Selecting, GetData(Value))
  
  SetItemText(*this, #_pi_id, Str(Value))
  SetItemText(*this, #_pi_class, GetClass(Value)+"_"+GetCount(Value))
  SetItemText(*this, #_pi_text, GetText(Value))
  SetItemText(*this, #_pi_x, Str(X(Value)))
  SetItemText(*this, #_pi_y, Str(Y(Value)))
  SetItemText(*this, #_pi_width, Str(Width(Value)))
  SetItemText(*this, #_pi_height, Str(Height(Value)))
EndProcedure

;-
Procedure inspector_get_pos(*this._s_widget, *new._s_widget, SubLevel)
  Protected i, Position = 1 ; Начальная позиция
  Protected CountItems = CountItems(*this)
  ; Protected SubLevel = GetLevel(*new)
  
  For i = 0 To CountItems - 1
    If *new = GetItemData(*this, i) 
      ; SubLevel = GetItemAttribute(*this, i, #PB_Tree_SubLevel) + 1
      Position = (i+1)
      Break
    EndIf
  Next 
  
  For i = Position To CountItems - 1
    If SubLevel > GetItemAttribute(*this, i, #PB_Tree_SubLevel) 
      Break
    Else
      SetData( GetItemData(*this, i), i)
      
      Position = (i+1)
    EndIf
  Next 
  
  ProcedureReturn Position
EndProcedure

Procedure inspector_add_pos(*this._s_widget, *new._s_widget, Class.s)
  Protected Parent = GetParent(*new)
  Protected SubLevel = GetLevel(Parent)
  Protected Position = inspector_get_pos(*this, Parent, SubLevel)
  ; Protected Class.s = GetClass(*new) +"_"+ GetCount(*new)
  
  AddItem(*this, Position, Class.s, #PB_Default, SubLevel)
  SetItemData(*this, Position, *new)
  SetState(*this, Position)
  SetItemState(*this, Position, #PB_Tree_Selected)
  
  ;     AddGadgetItem(WE_Selecting, Position, Class.s, 0, SubLevel )
  ;     SetGadgetItemData(WE_Selecting, Position, *new)
  ;     SetGadgetState(WE_Selecting, Position) ; Bug
  ;     SetGadgetItemState(WE_Selecting, Position, #PB_Tree_Selected)
  
  SetData(*new, Position)
  ;Add_Code(*new, Position-1, SubLevel)
  
  ProcedureReturn Position
EndProcedure




;-
Procedure.i GetSelectorX(*this._s_widget)
  ProcedureReturn Root()\anchor\x-*this\X[2]
EndProcedure

Procedure.i GetSelectorY(*this._s_widget)
  ProcedureReturn Root()\anchor\y-*this\Y[2]
EndProcedure

Procedure.i GetSelectorWidth(*this._s_widget)
  ProcedureReturn Root()\anchor\Width
EndProcedure

Procedure.i GetSelectorHeight(*this._s_widget)
  ProcedureReturn Root()\anchor\Height
EndProcedure

Global GrabDrawingImage

Procedure.i FreeSelector(*this._s_widget)
  Redraw(*this\root)
  
  ;*this\root\anchor = 0
  GrabDrawingImage = 0
EndProcedure

Procedure.i SetSelector(*this._s_widget)
  Redraw(*this\root)
  
  If StartDrawing( CanvasOutput(*this\root\canvas\gadget) )
    GrabDrawingImage = GrabDrawingImage(#PB_Any, 0,0, *this\root\width, *this\root\height)
    StopDrawing()
  EndIf
  
  ProcedureReturn *this
EndProcedure

Procedure.i UpdateSelector(*this._s_widget)
  Protected MouseX, MouseY, DeltaX, DeltaY
  
  If *this And GetButtons(*this)
    If Not *this\root\anchor
      *this\root\anchor = AllocateStructure(_s_anchor)
    EndIf
    
    ;If *this And *this\root\anchor And *this\root\selected
    DeltaX = *this\root\mouse\delta\x + *this\root\selected\x[#__c_3] 
    DeltaY = *this\root\mouse\delta\y + *this\root\selected\y[#__c_3]
    
    MouseX = *this\root\mouse\x
    MouseY = *this\root\mouse\y
    
    If DeltaX > MouseX
      Swap DeltaX, MouseX
    EndIf
    
    If DeltaY > MouseY
      Swap DeltaY, MouseY
    EndIf
    
    ;Debug ""+DeltaX +" "+ DeltaY +" "+ Str(MouseX-DeltaX) +" "+ Str(MouseY-DeltaY)
          
    *this\root\anchor\X = DeltaX
    *this\root\anchor\Y = DeltaY
    *this\root\anchor\Width = MouseX-DeltaX
    *this\root\anchor\Height = MouseY-DeltaY
    
   
    If GrabDrawingImage And StartDrawing( CanvasOutput(*this\root\canvas\gadget) )
      DrawImage(ImageID(GrabDrawingImage), 0,0)
      
      ; draw selector
      DrawingMode(#PB_2DDrawing_Outlined|#PB_2DDrawing_AlphaBlend)
      Box(*this\root\anchor\x, *this\root\anchor\y, *this\root\anchor\width, *this\root\anchor\height , $ff000000);*this\root\anchor\color[*this\root\anchor\state]\frame) 
      StopDrawing()
    EndIf
  EndIf
  
;   If *this\root\mouse\Drag
;     ProcedureReturn *this
;   EndIf
  
EndProcedure

;-
Declare object_events()

Procedure object_add_new(*parent._s_widget, type, x.l,y.l, width.l=0, height.l=0)
  Protected *param1, *param2, *param3, text.s, flag.i = #__flag_anchorsGadget
  
  Protected Position =- 1
  Protected *new._s_widget, Class.s
  
  
  Select type
    Case #__type_window    
      If Not Width
        Width=350
      EndIf
      
      If Not Height
        Height=200
      EndIf
      
      flag = #__Window_SystemMenu|#__Window_SizeGadget|#__Window_MaximizeGadget|#__Window_MinimizeGadget
      
    Case #PB_GadgetType_Container, #PB_GadgetType_ScrollArea, #PB_GadgetType_Panel, 
         #PB_GadgetType_Splitter, #PB_GadgetType_ListView, #PB_GadgetType_ListIcon, #PB_GadgetType_Image 
      
      If Not Width
        Width=220
      EndIf
      
      If Not Height
        Height=140
      EndIf
      
    Default
      If Not Width : Width=100 : EndIf
      If Not Height : Height=30 : EndIf
      
  EndSelect
  
  If *parent 
    OpenList(*parent) 
  EndIf
  
  Select Type
    Case #__type_window    
      If *parent\type = #PB_GadgetType_MDI
        *new = AddItem(*parent, -1, text, -1, flag)
      Else
        *new = Window(x,y,width,height, text, flag, *parent)
      EndIf
      
      Bind(*new, @object_events())
      
      ;Case #__type_window     : *new = Window(x,y,width,height, text, flag, *parent)
    Case #__type_ScrollArea : *new = ScrollArea(x,y,width,height, *param1, *param2, *param3, flag)
    Case #__type_Container  : *new = Container(x,y,width,height, flag)
    Case #__type_Panel      : *new = Panel(x,y,width,height, flag)
      
    Case #__type_Button     : *new = Button(x,y,width,height, text, flag)
  EndSelect
  
  If *new\container
    ; SetImage(*new, 5)
  EndIf
  
  If *new
    Class.s = GetClass(*new)+"_"+GetCount(*new)
    SetText(*new, Class.s)
    
    inspector_add_pos(id_inspector_tree, *new, Class.s)
    
;     If a_set(*new)
;       properties_update(id_properties_tree, *new)
;     EndIf
  EndIf
  
  If *parent : CloseList() : EndIf
  
  ProcedureReturn *new
EndProcedure

Procedure object_events()
  Static Drag, DragText.s
  Protected *this._s_widget
  Protected e_widget = *event\widget
  Protected e_type = *event\type
  
  
  Select e_type 
    Case #PB_EventType_MouseMove
;       If Drag
;         If Not UpdateSelector(Drag)
;           Drag = 0
;         EndIf
;       EndIf
;       
      ;Debug  Drag
      UpdateSelector(Drag)
      
    Case #PB_EventType_LeftButtonUp
      *this = a_get(e_widget)
      
      If *this
        Debug "изменено up "+ *this
        ;Debug " "+GetSelectorX(*this) +" "+ GetSelectorY(*this) +" "+ GetSelectorWidth(*this) +" "+ GetSelectorHeight(*this)
           
        If DragText
          If Drag
            
            *this = object_add_new(*this, GetClassType(DragText), GetSelectorX(*this), GetSelectorY(*this), GetSelectorWidth(*this), GetSelectorHeight(*this)) ; DeltaX, DeltaY, MouseX-DeltaX, MouseY-DeltaY)
            
            FreeSelector(*this)
            Drag = 0
          Else
            
            object_add_new(*this, GetClassType(DragText), GetMouseX(*this), GetMouseY(*this))
            
          EndIf
          
          DragText = ""
        Else
          properties_update(id_properties_tree, *this)
        EndIf
      EndIf
      
    Case #PB_EventType_LeftButtonDown
      *this = a_get(e_widget)
      
      If *this   
        If GetState(id_elements) > 0
          DragText = GetItemText(id_elements, GetState(id_elements))
          SetState(id_elements, 0)
        EndIf
        
        If DragText
          Drag = SetSelector(*This)
        Else
          If a_set(*this)
            Debug "изменено down"+ *this
            SetState(id_inspector_tree, GetData(*this))
            ;SetGadgetState(WE_Selecting, GetData(*this))
            properties_update(id_properties_tree, *this)
          EndIf
        EndIf
      EndIf
      
  EndSelect
  
EndProcedure

;-
Procedure ide_gadget_events()
  Protected *this._s_widget
  Protected e_type = *event\type
  Protected e_widget = *event\widget
  
  Select e_type
    Case #PB_EventType_Change
      If e_widget = id_inspector_tree
        *this = GetItemData(e_widget, GetState(e_widget))
        
        If *this And a_set(*this)
          Debug "изменено "+ GetState(e_widget)
          ;SetGadgetState(WE_Selecting, GetState(EventWidget))
          properties_update(id_properties_tree, *this)
        EndIf
      EndIf
      
  EndSelect
EndProcedure

Procedure ide_window_open(x=100,y=100,width=800,height=600)
  Define flag = #PB_Window_SystemMenu|#PB_Window_SizeGadget|#PB_Window_MaximizeGadget|#PB_Window_MinimizeGadget
  Define root = widget::Open(OpenWindow(#PB_Any, x,y,width,height, "ide", flag))
  window_ide = widget::GetWindow(root)
  canvas_ide = widget::GetGadget(root)
  
  toolbar_design = 0
  id_design = MDI(0,0,0,0) 
  id_inspector_tree = Tree(0,0,0,0)
  listview_debug = Editor(0,0,0,0) ; ListView
                                   ;   AddItem(listview_debug, 0, "Form_0", 0, 0) 
                                   ;   AddItem(listview_debug, 1, "Form_1", 0, 0)  
                                   ;   AddItem(listview_debug, 2, "Form_2", 0, 0)
  
  id_inspector_panel = Panel(0,0,0,0)
  AddItem(id_inspector_panel, 0, "elements", 0, 0) 
  id_elements = Tree(0,0,0,0, #__flag_autosize|#__flag_NoButtons|#__flag_NoLines)
  ; AddItem(id_elements, 0, "Button", 0, 0) ; bug tree no add fill list
  
  AddItem(id_inspector_panel, 1, "properties", 0, 0)  
  id_properties_tree = Tree(0,0,0,0, #__flag_autosize)
  Define Value = id_properties_tree
  AddItem(id_properties_tree, #_pi_id, Str(Value))
  AddItem(id_properties_tree, #_pi_class, GetClass(Value)+"_"+GetCount(Value))
  AddItem(id_properties_tree, #_pi_text, GetText(Value))
  AddItem(id_properties_tree, #_pi_x, Str(X(Value)))
  AddItem(id_properties_tree, #_pi_y, Str(Y(Value)))
  AddItem(id_properties_tree, #_pi_width, Str(Width(Value)))
  AddItem(id_properties_tree, #_pi_height, Str(Height(Value)))
  
  AddItem(id_inspector_panel, 2, "events", 0, 0)  
  CloseList()
  
  text_help  = Text(0,0,0,0, "help for the inspector", #__text_border)
  
  
  Splitter_design = widget::Splitter(0,0,0,0, toolbar_design,id_design, #PB_Splitter_FirstFixed|#PB_Splitter_Separator)
  Splitter_inspector = widget::Splitter(0,0,0,0, id_inspector_tree,id_inspector_panel, #PB_Splitter_FirstFixed)
  splitter_debug = widget::Splitter(0,0,0,0, Splitter_design,listview_debug, #PB_Splitter_SecondFixed)
  splitter_help = widget::Splitter(0,0,0,0, Splitter_inspector,text_help, #PB_Splitter_SecondFixed)
  Splitter_ide = widget::Splitter(0,0,0,0, splitter_debug,splitter_help, #__flag_autosize|#PB_Splitter_Vertical|#PB_Splitter_SecondFixed)
  
  ; set splitters default minimum size
  widget::SetAttribute(Splitter_ide, #PB_Splitter_FirstMinimumSize, 500)
  widget::SetAttribute(Splitter_ide, #PB_Splitter_SecondMinimumSize, 120)
  widget::SetAttribute(splitter_help, #PB_Splitter_SecondMinimumSize, 30)
  widget::SetAttribute(splitter_debug, #PB_Splitter_SecondMinimumSize, 100)
  widget::SetAttribute(Splitter_inspector, #PB_Splitter_FirstMinimumSize, 100)
  widget::SetAttribute(Splitter_design, #PB_Splitter_FirstMinimumSize, 20)
  ; widget::SetAttribute(Splitter_design, #PB_Splitter_SecondMinimumSize, $ffffff)
  
  ; set splitters dafault positions
  widget::SetState(Splitter_ide, widget::width(Splitter_ide)-220)
  widget::SetState(splitter_help, widget::height(splitter_help)-80)
  widget::SetState(splitter_debug, widget::height(splitter_debug)-150)
  widget::SetState(Splitter_inspector, 150)
  widget::SetState(Splitter_design, 30)
  
  
  Bind(id_inspector_tree, @ide_gadget_events())
  ProcedureReturn window_ide
EndProcedure

Procedure ide_window_events(Event)
  Select event
      
  EndSelect
EndProcedure

;-
CompilerIf #PB_Compiler_IsMainFile 
  Define event
  ide_window_open()
  
  
  elements_list_fill(id_elements, GetCurrentDirectory()+"Themes/")
  
  ;OpenList(id_design)
  Define *window = object_add_new(id_design, #__type_window, 10, 10)
  Define *container = object_add_new(*window, #__type_container, 80, 10)
  object_add_new(*container, #__type_button, 10, 20)
  object_add_new(*window, #__type_button, 10, 20)
  
  Define *window = object_add_new(id_design, #__type_window, 10, 10)
  Define *container = object_add_new(*window, #__type_container, 80, 10)
  object_add_new(*container, #__type_button, 10, 20)
  object_add_new(*window, #__type_button, 10, 20)
  ;CloseList()
  
  Repeat 
    event = WaitWindowEvent() 
    
    Select EventWindow()
      Case window_ide 
        ide_window_events(event)
    EndSelect
    
  Until event = #PB_Event_CloseWindow
CompilerEndIf
; IDE Options = PureBasic 5.71 LTS (MacOS X - x64)
; Folding = 7-Pb+f--8-6-
; EnableXP